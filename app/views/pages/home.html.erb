



<div class="row">

<div class="col-sm-6">

<blockquote>
<p class="lead">
<h3>The Classics Diasporic Reference Database </h3> is a growing catalogue of references that aims to illuminate the long history of engagement with classicsm on the part of black american women authors from Phyllis Wheatley to Toni Morrison.

</p>
</blockquote>

</div>

<div class="col-sm-6">
<blockquote>
<p>
<h3> In this database: </h>

<h3> <%= @authors %></h3> Authors
<h3> <%= @works %></h3> Works
<h3> <%= @references %></h3> References
</p>
</blockquote>
</div>


</div>
<hr>



<div class= "row">

<div class="col-xs-12">
<br>
<br>
<h3> Reference Type X Author </h3>
<svg id="stacked" width="960" height="960"></svg>

</div>

</div>


<div class= "row">

<div class="col-xs-12">
<br>
<br>
<h3> References X Work </h3>
<svg id="hbar" width="960" height="960"></svg>

</div>

</div>




<div class="row">
<div class="col-xs-6">


<h3> Total References X Frequency </h3>
<div id="bubble" > </div>

</div>

<div class="col-xs-6">



</div>

</div>



</div>



<script>
var svg = d3.select("#hbar"),
margin = {top: 20, right: 20, bottom: 30, left: 80},
width = +svg.attr("width") - margin.left - margin.right,
height = +svg.attr("height") - margin.top - margin.bottom;

var tooltip = d3.select("body").append("div").attr("class", "toolTip");

var x = d3.scaleLinear().range([0, width]);
var y = d3.scaleBand().range([height, 0]);

var g = svg.append("g")
.attr("transform", "translate(" + margin.left + "," + margin.top + ")");

d3.json("/ref_work", function(error, data) {
if (error) throw error;

data.sort(function(a, b) { return a.value - b.value; });

x.domain([0, d3.max(data, function(d) { return d.value; })]);
y.domain(data.map(function(d) { return d.name; })).padding(0.1);

g.append("g")
.attr("class", "x axis")
.attr("transform", "translate(0," + height + ")")
.call(d3.axisBottom(x).ticks(5).tickFormat(function(d) { return parseInt(d); }).tickSizeInner([-height]));

g.append("g")
.attr("class", "y axis")
.call(d3.axisLeft(y));

g.selectAll(".bar")
.data(data)
.enter().append("rect")
.attr("class", "bar")
.attr("x", 0)
.text(function(d) { return d.value; })
.attr("height", y.bandwidth())
.attr("y", function(d) { return y(d.name); })
.attr("width", function(d) { return x(d.value); })
.on("mousemove", function(d){
tooltip
.style("left", d3.event.pageX - 50 + "px")
.style("top", d3.event.pageY - 70 + "px")
.style("display", "inline-block")
.html((d.name) + "<br>" + (d.author) + "<br>" + (d.value) + " references");
})
.on("mouseout", function(d){ tooltip.style("display", "none");});



})
</script>



<script>

//set up container for stacked graph

var container1 = d3.select("#stacked")
margin_stacked = {top: 20, right: 180, bottom: 30, left: 40},
width_stacked = +container1.attr("width") - margin_stacked.left - margin_stacked.right,
height_stacked = +container1.attr("height") - margin_stacked.top - margin_stacked.bottom,
stacked_path = container1.append("g").attr("transform", "translate(" + margin_stacked.left + "," + margin_stacked.top + ")");


//set up x and y variables for stacked graph

var x_stacked = d3.scaleBand()
.rangeRound([0, width])
.padding(0.3)
.align(0.3);

var y_stacked = d3.scaleLinear()
.rangeRound([height, 0]);

var z_stacked = d3.scaleOrdinal(d3.schemeCategory20);
// .range(["#98abc5", "#8a89a6", "#7b6888", "#6b486b", "#a05d56", "#d0743c", "#ff8c00"]);


//

var stack = d3.stack();

d3.csv("/stacked.csv", type, function(error, data) {
if (error) throw error;

data.sort(function(a, b) { return b.total - a.total; });

x_stacked.domain(data.map(function(d) { return d.Author; }));
y_stacked.domain([0, d3.max(data, function(d) { return d.total; })]).nice();
z_stacked.domain(data.columns.slice(1));

stacked_path.selectAll(".serie")
.data(stack.keys(data.columns.slice(1))(data))
.enter().append("g")
.attr("class", "serie")
.attr("fill", function(d) { return z_stacked(d.key); })
.selectAll("rect")
.data(function(d) { return d; })
.enter().append("rect")
.attr("x", function(d) { return x_stacked(d.data.Author); })
.attr("y", function(d) { return y_stacked(d[1]); })
.attr("height", function(d) { return y_stacked(d[0]) - y_stacked(d[1]); })
.attr("width", x_stacked.bandwidth());

stacked_path.append("g")
.attr("class", "axis axis--x")
.attr("transform", "translate(0," + height_stacked + ")")
.call(d3.axisBottom(x_stacked));

stacked_path.append("g")
.attr("class", "axis axis--y")
.call(d3.axisLeft(y_stacked).ticks(10, "s"))
.append("text")
.attr("x", 2)
.attr("y", y_stacked(y_stacked.ticks(10).pop()))
.attr("dy", "0.35em")
.attr("text-anchor", "start")
.attr("fill", "#000")


var legend = stacked_path.selectAll(".legend")
.data(data.columns.slice(1).reverse())
.enter().append("g")
.attr("class", "legend")
.attr("transform", function(d, i) { return "translate(0," + i * 20 + ")"; })
.style("font", "12px sans-serif");

legend.append("rect")
.attr("x", width_stacked + 18)
.attr("width", 18)
.attr("height", 18)
.attr("fill", z_stacked);

legend.append("text")
.attr("x", width_stacked + 44)
.attr("y", 9)
.attr("dy", ".35em")
.attr("text-anchor", "start")
.text(function(d) { return d; });
});

function type(d, i, columns) {
for (i = 1, t = 0; i < columns.length; ++i) t += d[columns[i]] = +d[columns[i]];
d.total = t;
return d;
}


</script>

<script>

var diameter = 960,
format = d3.format(",d"),
color = d3.scaleOrdinal(d3.schemeCategory20b);

var bubble = d3.pack()
.size([diameter, diameter])
.padding(1.5);

var container_bubble = d3.select("#bubble").append("svg")
.attr("width", diameter)
.attr("height", diameter)
.attr("class", "bubble");

d3.json("/flare", function(error, data) {
if (error) throw error;

var root = d3.hierarchy(classes(data))
.sum(function(d) { return d.value; })
.sort(function(a, b) { return b.value - a.value; });

bubble(root);
var node = container_bubble.selectAll(".node")
.data(root.children)
.enter().append("g")
.attr("class", "node")
.attr("transform", function(d) { return "translate(" + d.x + "," + d.y + ")"; });

node.append("title")
.text(function(d) { return d.data.className + ": " + format(d.value); });

node.append("circle")
.attr("r", function(d) { return d.r; })
.style("fill", function(d) {
return color(d.data.packageName);
});

node.append("text")
.attr("dy", ".3em")
.style("text-anchor", "middle")
.text(function(d) { return d.data.className.substring(0, d.r / 3); });
});

// Returns a flattened hierarchy containing all leaf nodes under the root.
function classes(root) {
var classes = [];

function recurse(name, node) {
if (node.children) node.children.forEach(function(child) { recurse(node.name, child); });
else classes.push({packageName: name, className: node.name, value: node.size});
}

recurse(null, root);
return {children: classes};
}

d3.select(self.frameElement).style("height", diameter + "px");



</script>

