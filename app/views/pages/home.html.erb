<nav class="navbar navbar-default navbar-fixed-top">
<div class="container">
<div class="navbar-header">
<a class="navbar-brand" href="#">Classics Reference Database</a>
<p class="navbar-text"> Beta | In development </p>
</div>
<ul class="nav navbar-nav navbar-right">
<li><a href="#">Authors</a></li>
<li><a href="#">About</a></li>
</ul>
</div>
</nav>

<div class="container">

<div class="row">
<div class="col-xs-6">

<br>
</div>

</div>


<div class= "row">

<div class="col-xs-12">
<br>
<br>
<h3> References X Work </h3>
<svg width="960" height="960"></svg>

</div>

</div>

<div class="row">
<div class="col-xs-6">

<div id="chart"> </div>


<h3> Total References X Frequency </h3>
<chart2>

</chart2>

</div>

<div class="col-xs-6">



</div>

</div>



</div>

</div>

<script>
var svg = d3.select("svg"),
margin = {top: 20, right: 20, bottom: 30, left: 80},
width = +svg.attr("width") - margin.left - margin.right,
height = +svg.attr("height") - margin.top - margin.bottom;

var tooltip = d3.select("body").append("div").attr("class", "toolTip");

var x = d3.scaleLinear().range([0, width]);
var y = d3.scaleBand().range([height, 0]);

var g = svg.append("g")
.attr("transform", "translate(" + margin.left + "," + margin.top + ")");

d3.json("/ref_work", function(error, data) {
if (error) throw error;

data.sort(function(a, b) { return a.value - b.value; });

x.domain([0, d3.max(data, function(d) { return d.value; })]);
y.domain(data.map(function(d) { return d.name; })).padding(0.1);

g.append("g")
.attr("class", "x axis")
.attr("transform", "translate(0," + height + ")")
.call(d3.axisBottom(x).ticks(5).tickFormat(function(d) { return parseInt(d); }).tickSizeInner([-height]));

g.append("g")
.attr("class", "y axis")
.call(d3.axisLeft(y));

g.selectAll(".bar")
.data(data)
.enter().append("rect")
.attr("class", "bar")
.attr("x", 0)
.text(function(d) { return d.value; })
.attr("height", y.bandwidth())
.attr("y", function(d) { return y(d.name); })
.attr("width", function(d) { return x(d.value); })
.on("mousemove", function(d){
tooltip
.style("left", d3.event.pageX - 50 + "px")
.style("top", d3.event.pageY - 70 + "px")
.style("display", "inline-block")
.html((d.name) + "<br>" + (d.author) + "<br>" + (d.value) + " references");
})
.on("mouseout", function(d){ tooltip.style("display", "none");});



})
</script>








<script>

var diameter = 960,
format = d3.format(",d"),
color = d3.scaleOrdinal(d3.schemeCategory20b);

var bubble = d3.pack()
.size([diameter, diameter])
.padding(1.5);

var svg = d3.select("body").append("svg")
.attr("width", diameter)
.attr("height", diameter)
.attr("class", "bubble");

d3.json("/flare", function(error, data) {
if (error) throw error;

var root = d3.hierarchy(classes(data))
.sum(function(d) { return d.value; })
.sort(function(a, b) { return b.value - a.value; });

bubble(root);
var node = svg.selectAll(".node")
.data(root.children)
.enter().append("g")
.attr("class", "node")
.attr("transform", function(d) { return "translate(" + d.x + "," + d.y + ")"; });

node.append("title")
.text(function(d) { return d.data.className + ": " + format(d.value); });

node.append("circle")
.attr("r", function(d) { return d.r; })
.style("fill", function(d) {
return color(d.data.packageName);
});

node.append("text")
.attr("dy", ".3em")
.style("text-anchor", "middle")
.text(function(d) { return d.data.className.substring(0, d.r / 3); });
});

// Returns a flattened hierarchy containing all leaf nodes under the root.
function classes(root) {
var classes = [];

function recurse(name, node) {
if (node.children) node.children.forEach(function(child) { recurse(node.name, child); });
else classes.push({packageName: name, className: node.name, value: node.size});
}

recurse(null, root);
return {children: classes};
}

d3.select(self.frameElement).style("height", diameter + "px");

</script>
