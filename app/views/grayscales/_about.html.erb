<section id="authors" class="container content-section text-center">
    <div class="row">

<div class="container">

<div class="container testimonial-group">
<div class="row text-center">

<div class="col-lg-8">
<h3> Reference Type X Author </h3>
<svg id="stacked" width="700" height="500"></svg>
</div><!--
--><div class="col-4">


</div><!--
--><div class="col-lg-8">
<h3> Reference Type Ratio </h3>
<svg id="pie" width="400" height="400"></svg>

</div><!--
--><div class="col-4"></div><!--
--><div class="col-lg-8">
<h3> More Graphs To Come </h3>
</div><!--
--><div class="col-4">5</div>


</div>
</div>
</div>



    </div>
</section>

<script>

//set up container for stacked graph

var container1 = d3.select("#stacked")
margin_stacked = {top: 20, right: 180, bottom: 80, left: 40},
width_stacked = +container1.attr("width") - margin_stacked.left - margin_stacked.right,
height_stacked = +container1.attr("height") - margin_stacked.top - margin_stacked.bottom,
stacked_path = container1.append("g").attr("transform", "translate(" + margin_stacked.left + "," + margin_stacked.top + ")");


//set up x and y variables for stacked graph

var x_stacked = d3.scaleBand()
.rangeRound([0, width_stacked])
.padding(0.3)
.align(0.3);

var y_stacked = d3.scaleLinear()
.rangeRound([height_stacked, 0]);

var z_stacked = d3.scaleOrdinal(d3.schemeCategory20);
// .range(["#98abc5", "#8a89a6", "#7b6888", "#6b486b", "#a05d56", "#d0743c", "#ff8c00"]);


//

var stack = d3.stack();

d3.csv("/stacked.csv", type, function(error, data) {
if (error) throw error;

data.sort(function(a, b) { return b.total - a.total; });

x_stacked.domain(data.map(function(d) { return d.Author; }));
y_stacked.domain([0, d3.max(data, function(d) { return d.total; })]).nice();
z_stacked.domain(data.columns.slice(1));

stacked_path.selectAll(".serie")
.data(stack.keys(data.columns.slice(1))(data))
.enter().append("g")
.attr("class", "serie")
.attr("fill", function(d) { return z_stacked(d.key); })
.selectAll("rect")
.data(function(d) { return d; })
.enter().append("rect")
.attr("x", function(d) { return x_stacked(d.data.Author); })
.attr("y", function(d) { return y_stacked(d[1]); })
.attr("height", function(d) { return y_stacked(d[0]) - y_stacked(d[1]); })
.attr("width", x_stacked.bandwidth());

stacked_path.append("g")
.attr("class", "axis axis--x")
.attr("transform", "translate(0," + height_stacked + ")")
.call(d3.axisBottom(x_stacked));

stacked_path.append("g")
.attr("class", "axis axis--y")
.call(d3.axisLeft(y_stacked).ticks(10, "s"))
.append("text")
.attr("x", 2)
.attr("y", y_stacked(y_stacked.ticks(10).pop()))
.attr("dy", "0.35em")
.attr("text-anchor", "start")
.attr("fill", "#000")


var legend = stacked_path.selectAll(".legend")
.data(data.columns.slice(1).reverse())
.enter().append("g")
.attr("class", "legend")
.attr("transform", function(d, i) { return "translate(0," + i * 20 + ")"; })
.style("font", "12px sans-serif");

legend.append("rect")
.attr("x", width_stacked + 18)
.attr("width", 18)
.attr("height", 18)
.attr("fill", z_stacked);

legend.append("text")
.attr("x", width_stacked + 44)
.attr("y", 9)
.attr("dy", ".35em")
.attr("text-anchor", "start")
.text(function(d) { return d; });
});

function type(d, i, columns) {
for (i = 1, t = 0; i < columns.length; ++i) t += d[columns[i]] = +d[columns[i]];
d.total = t;
return d;
}


</script>




<script>

var pie_svg = d3.select("#pie"),
pie_width = +pie_svg.attr("width"),
pie_height = +pie_svg.attr("height"),
pie_radius = Math.min(pie_width, pie_height) / 2,
pie_g = pie_svg.append("g").attr("transform", "translate(" + pie_width / 2 + "," + pie_height / 2 + ")");

var pie_color = d3.scaleOrdinal(d3.schemeCategory20b);

var pie = d3.pie()
.sort(null)
.value(function(d) { return d.value; });

var pie_path = d3.arc()
.outerRadius(pie_radius - 10)
.innerRadius(0);

var pie_label = d3.arc()
.outerRadius(pie_radius - 40)
.innerRadius(pie_radius - 40);

d3.csv("genre_count.csv", function(d) {
d.value = +d.value;
return d;
}, function(error, data) {
if (error) throw error;

var pie_arc = pie_g.selectAll(".arc")
.data(pie(data))
.enter().append("g")
.attr("class", "arc");

pie_arc.append("path")
.attr("d", pie_path)
.attr("fill", function(d) { return pie_color(d.data.name); });

pie_arc.outerRadius.append("text")
.attr("transform", function(d) { return "translate(" + pie_label.centroid(d) + ")"; })
.attr("dy", "0.35em")
.text(function(d) { return d.data.name; });
});

</script>